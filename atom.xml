<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>sulami's blog</title>
    <link href="https://sulami.github.io/atom.xml" rel="self" />
    <link href="https://sulami.github.io" />
    <id>https://sulami.github.io/atom.xml</id>
    <author>
        <name>Robin Schroer</name>
        <email>sulami@peerwire.org</email>
    </author>
    <updated>Does popularity matter when choosing a stack?</updated>
    <entry>
    <title>Does popularity matter when choosing a stack?</title>
    <link href="Does popularity matter when choosing a stack?Does popularity matter when choosing a stack?" />
    <id>Does popularity matter when choosing a stack?Does popularity matter when choosing a stack?</id>
    <published>2018-06-29T00:00:00Z</published>
    <updated>Does popularity matter when choosing a stack?</updated>
    <summary type="html"><![CDATA[<p>Recently there has been a lot of turmoil around <a href="vue">Vue.js</a> reaching the same number of stars on GitHub as <a href="react">React</a>. While stars on GitHub are far from a reliable indicator of actual popularity and size of user base, it does raise the question whether these should actually matter when choosing a stack for a new piece of software.</p>
<p>The easy answer is that it should not really matter. Especially if you are working in a somewhat specialised environment or are under a lot of constraints, like low-power hardware or strict performance requirements, you will probably end up using a very domain-specific set of tools. A language like Kotlin is the recommended way forward if you are developing an android application, but looking at the <a href="https://www.tiobe.com/tiobe-index/">TIOBE index</a><span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">I have to mention that I believe the TIOBE index to be a bit biased though, not that I was perfectly objective. The overall “winner” of 2013 is Transact-SQL, a language many programmers will not even have heard of.<br />
<br />
</span></span>, and still it only comes in at position 49 at the time of writing, so obviously popularity cannot matter more than platform constraints.</p>
<p>Another quite important factor is the already present repertoire of tools. Many tools, especially languages and large frameworks, like Vue.js and React, require rather large upfront learning efforts before they can be used efficiently. If you already know React inside out, why would you learn Vue, assuming it fundamentally does not enable you to do anything React does not? I am currently paying for my food by writing code in a primarily Python/Django environment, and sometimes I look over at the neat lawn the Ruby on Rails crowd seems to have, but it would not be wise of me to invest a sizeable amount of time to switch ecosystems without actually gaining much.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Apart from that Python is also larger and growing in comparison to Ruby. Ruby is probably not dying anytime soon, but it is definitely declining since the days when everything was Rails, much to my dismay.<br />
<br />
</span></span></p>
<p>I can already hear you type your furious <a href="https://twitter.com/_sulami_">tweets at me</a>, claiming how popularity of course makes a difference. And you are not wrong, there are very valid arguments to be made.</p>
<p>Popularity does indeed matter when you chose a technology to use, for example if you need to add support for a new data format and shop around for libraries. Especially in the open-source world a larger user base means more eyes scanning the code for bugs, more potential contributors keeping the software updated and supplying it with new features, and better chances it will stay maintained overall. If you use a common set of softwares, chances are they can interact easily in some way, saving you time for integrating them. All of these are important factors which should be considered when making a voice of tooling.</p>
<p>In the end there is no single deciding factor to look at, like for example popularity, but instead a lot of different ones. It is crucial to recognise all of them and think about how to weight them in importance. Newer (and shiny) tools might offer significant gains, but come at the price of a smaller community, so less support and a higher risk of abandonment.</p>]]></summary>
</entry>
<entry>
    <title>React Native &amp; ClojureScript - An obscure stack</title>
    <link href="React Native &amp; ClojureScript - An obscure stackReact Native &amp; ClojureScript - An obscure stack" />
    <id>React Native &amp; ClojureScript - An obscure stackReact Native &amp; ClojureScript - An obscure stack</id>
    <published>2018-06-15T00:00:00Z</published>
    <updated>React Native &amp; ClojureScript - An obscure stack</updated>
    <summary type="html"><![CDATA[<p>I have been working on a new side project for about two months now, a task manager app which is primarily aimed at iOS. This is a typical “scratching my own itch” side project. There are plenty of task manager apps on the App Store, but none of them seems to do exactly what I would like mine to do.<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Of course I cannot disclose the exact of features at this point, both because I’m really slow at development and also because a lot is still work in progress. I can say that none of the big ones (top 200 productivity) does everything I want.<br />
<br />
</span></span></p>
<p>My technical requirements are not outlandish, I need access to the system calendar, location services, trigger notifications, and that is about it. Performance should of course be great, but considering that we are talking about an app that essentially boils down to a lot of tables, and I know my way around handling large amounts of data, I am not worried about that.</p>
<p>Originally I started developing this app in Swift, using XCode for development. Apart from having to fight with a somewhat buggy vim-plugin for Xcode, package management for mobile environments on Swift is a big mess, though I managed to load in the libraries I needed in the end. Then there is Swift, which especially in the way Apple wants you to write apps, using the visual interface designer and <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1">control-dragging buttons into source files</a>, is not ideal. It feels unnecessarily low level in a lot of places, and the default project structure promotes a rather imperative style, without any real solution to manage state in a sensible way.</p>
<p>So after having built a first prototype in the classic way on Swift, I decided to have a look around at alternatives. I did not want to use <a href="https://cordova.apache.org">Cordova</a>, which is essentially the Electron of mobile platforms, running your JS code inside a fullscreen browser. While I am not worried about performance, I could see this additional runtime layer making the whole UI less snappy. So I had a look at <a href="https://facebook.github.io/react-native/">React Native</a>, a framework based on React which compiles to native platform code through some magic. React is currently used at my workplace (along with some legacy Angular code), so I have access to some <a href="https://github.com/inestavares">experienced</a> React <a href="https://github.com/bradlocking">developers</a> to help me at least for conceptual understanding, which was quite helpful.</p>
<p>While I have been interested in getting a bit more frontend experience, the prospect of having to write a lot of Javascript still was not overly compelling, so I had another quick look around whether some of the languages that compile to Javascript allow for easy integration with React Native. While there are some <a href="https://github.com/ohanhi/elm-native-ui">Elm wrappers</a>, the ClojureScript wrapper <a href="https://github.com/drapanjanas/re-natal">Re-Natal</a> around React Native along with <a href="https://github.com/Day8/re-frame">re-frame</a> &amp; <a href="http://reagent-project.github.io">Reagent</a> wrapping around React are much more mature options. I also wanted to have a more serious look at Clojure for a while, as I have heard that it is exceptionally well designed as a language.</p>
<p>So this is the stack I am now using, which so far has turned out to be a good decision overall. I do feel reasonably comfortable in Clojure(Script) at this point, though the whole compilation process is still a bit arcane to me, as it compiles over Javascript to native code, and there are a lot of moving parts I do not know a lot about.</p>
<p>The only issue I encountered so far was that running on a real device did not work in React Native 0.54, which has been fixed in 0.55, which in turn deprecated some interfaces my navigation library was using, causing lots of nice warnings to show up in my build.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote"><img src="/images/ios-warnings.png" title="fig:" alt="png" /><br />
<br />
</span></span> I am currently in contact with the maintainer of the ClojureScript library which wraps a JavaScript library which has broken backwards compatibility, and I am working on fixing these issues myself, a great challenge considering I have about a month of ClojureScript experience at this point, but also a lot of fun.</p>
<p>My goal for this is to eventually end up on the App Store, use it myself, and <em>maybe</em> even make some money out of this. I do not expect this to ever become remotely profitable, but it is going to be a nice bullet point on my CV. So far I have a small fraction of the features I have planned, but I believe I have worked out most of the difficult parts to the point where I can quite efficiently extend the functionality on top of what I have built so far.</p>
<p>Bottom line of this post is, I like this stack a lot. It has not been smooth sailing all the way, and some of the tooling I use is still in quite early development, but I have yet to find anything that completely blocks me for more than an hour.</p>]]></summary>
</entry>
<entry>
    <title>Distractions, Productivity, and Working from Home</title>
    <link href="Distractions, Productivity, and Working from HomeDistractions, Productivity, and Working from Home" />
    <id>Distractions, Productivity, and Working from HomeDistractions, Productivity, and Working from Home</id>
    <published>2017-12-20T00:00:00Z</published>
    <updated>Distractions, Productivity, and Working from Home</updated>
    <summary type="html"><![CDATA[<p>I have been working from home more than usual recently, thanks to my employer, who understands that five days a week in an open office aren’t the ideal environment for everyone. After mentioning that I noticed a perceived increase in productivity, I was asked to find out what it is that makes me so much more productive at home. The obvious answer is that there are fewer distracting factors at home than at the office<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">This can be coworkers directly, but also just things like background chatter, the coffee machine, or even just visual distractions in the form of people walking in your field of vision all the time.<br />
<br />
</span></span>, which of course is true, but it is not necessarily the truth.</p>
<p>The reason I feel more productive when working from home, and thus better in general, is my ability to easily get into the Zone™, the state of mind where focus on the task at hand trumps everything else. My objectively measured output in the form of commits can be easily gauged by just having a look at the Github activity histogram of my account, which shows that over the last month, the days I worked from home have seen almost a doubling of activity. This seems like a pretty obvious gain no one should be able to deny, but I am going to argue at this point that there is more to my job than just pumping out code.</p>
<h2 id="what-makes-a-great-engineer">What makes a great engineer?</h2>
<p>Sure, one part of my just is producing features and fixing bugs, but software engineering has a huge social component many tend to forget about. During the days I am in the office, I talk to developers from other teams, catch up on the latest developments, discuss design decisions for upcoming features and projects, help out in situations that are not strictly my responsibility, and generally just trade in some of my personal productivity to bring up company productivity. I think it is important to make this division, because on some days I personally do not write a single line of code, but I enable others to sometimes save hours of their time, which arguably is the greater gain for the company. Building a Fortress of Solitude can be tempting to boost personal output, but it is not what makes a great engineer.</p>
<h2 id="but-why">But why?</h2>
<p>Even after coming to the conclusion that the gain in personal productivity might not be worth it when looking at the big picture, I still maintain that I want to work from home some of the time. Why is that? The gain here is personal happiness for me. My happiness is, at least to some degree, bound to my (perceived) personal productivity. When I track time in the evening, write my work journal<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Something I have been experimenting with. More on that in a future post. But it’s basically just writing down what I did by the end of the day.<br />
<br />
</span></span> or talk about yesterday in the daily standup, I feel pressured to have produced something more or less tangible. But on some days, I do not really have anything I can say I produced. I do not think anyone actually minds, because I just say “I spent eight hours yesterday helping someone unbreak the builds”, but somewhere deep down it still feels wrong.</p>
<p>Another thought I had was that I am not nearly as closely monitored when working from home compared to the days I am coming in. This allows me to just wander off to the kitchen, the toilet, or the supermarket if I feel like I need a couple of minutes to think something over. This is considerably harder to do in the office, even though our open office is not quite an Orwellian surveillance state. Instead of taking these small breaks, or sometimes even power naps, I just try to soldier through while I am at the office, because that is what I am there for.</p>
<h2 id="finding-a-compromise">Finding a compromise</h2>
<p>So what should you be doing? First of all, every situation is unique, and I cannot give any blanket advice. If you get the chance, I think you should definitely try working from home at some point. It does require some discipline, more if your home is actually busy with family or flat-mates. But do not take this opportunity for granted, and if your employer says that this is not working out from their perspective, you have no real alternative to accepting that fact.</p>
<p>Even when working from home, I make an effort to stay connected, which today means having Slack on all my devices<span><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle"/><span class="sidenote">This is in general a terrible idea, don’t do this. I will write about information diets at some point.<br />
<br />
</span></span> and being transparent about what I am doing. This is an important step when building trust so your employer does not feel like you are just abusing this privilege to catch up on Westworld. I also only work from home when I know I am not required in any meetings, and I make a point of talking to everyone I need to talk to the day before, so I can tie up all loose ends.</p>]]></summary>
</entry>
<entry>
    <title>Hello, World! Again!</title>
    <link href="Hello, World! Again!Hello, World! Again!" />
    <id>Hello, World! Again!Hello, World! Again!</id>
    <published>2017-11-11T00:00:00Z</published>
    <updated>Hello, World! Again!</updated>
    <summary type="html"><![CDATA[<p>First of all, I know it has been quite silent on here for a while. Since the last time I posted here, I switched jobs, and moved countries, so it would be fair to say that I have been quite busy in the meanwhile. But I’d still like to apologise, and I promise I will try to post more frequently from now on.</p>
<p>If you have been here before, you might have noticed that things have changed a fair bit. This is the new blog, reborn from the ashes, so to say. Though only because I felt like it was necessary to burn the old one. It’s now built using <a href="https://jaspervdj.be/hakyll/">Hakyll</a> instead of <a href="https://blog.getpelican.com">Pelican</a><span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Why switch, you ask? Shiny toys, that’s why.<br />
<br />
</span></span>, and it’s using <a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS</a> instead of my homegrown Jinja2 templates and CSS. I spent much more time on setting this up than I care to admit. The upshot is, I have new CSS without having to rewrite all my custom templates from scratch, and get to use these neat stylesheets.</p>
<p>One of my major pains with my old setup was the setup required to just write something quickly, due to the fact that I was maintaining my own styles and sources in different repositories, and also because Python requirements are notoriously janky if you’re not careful. This new system is handled entirely by <a href="https://www.stackage.org">stack</a>, which makes things much easier.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">By the way, you can get the source of this blog <a href="https://github.com/sulami/sulami.github.io">over here</a>, if you want to steal some code, or just look at it.<br />
<br />
</span></span> Initial setup takes quite a while, because I have to compile a whole load of dependencies, but it’s a fully automatic setup.</p>
<p>I have to admit, I was tempted to just switch to Medium during this whole process. But now that I have figured out how to build this whole thing<span><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle"/><span class="sidenote">Read: get it to compile<br />
<br />
</span></span>, I am quite happy with the results. Because Hakyll, just like Pelican, uses Markdown as source to generate HTML, I could easily port over my old posts once the dust had settled.</p>]]></summary>
</entry>
<entry>
    <title>A Fuzzy Finder in Haskell</title>
    <link href="A Fuzzy Finder in HaskellA Fuzzy Finder in Haskell" />
    <id>A Fuzzy Finder in HaskellA Fuzzy Finder in Haskell</id>
    <published>2016-06-24T00:00:00Z</published>
    <updated>A Fuzzy Finder in Haskell</updated>
    <summary type="html"><![CDATA[<p>This is a response to <em><a href="http://blog.amjith.com/fuzzyfinder-in-10-lines-of-python">FuzzyFinder - in 10 lines of Python</a></em>, which was posted to reddit yesterday.</p>
<p>Following the blogpost linked above, I decided to write my own fuzzy finder in Haskell, because that is the language I am currently learning, and think has great potential. It is also a more interesting <a href="https://github.com/sulami/spielwiese/tree/master/hEuler">exercise</a> than <a href="https://projecteuler.net/">Project Euler</a>.</p>
<p>Just in case you have not read the original post and do not know what a fuzzy finder is, it is a mechanism to filter and sort a list of strings by searching for substrings. It is often used in text editors like vim or Sublime Text, where you can just type in <em>“accmanba”</em> and they will open up <code>account_management_backend.py</code> for you. As you can see, it makes switching between more than two files in a project much easier and faster.</p>
<p>Amjith wrote his finder using regular expressions, which are part of the Python standard library and can be compiled to be reasonably fast very easily. Sadly, Haskell has no implementation of regular expressions in its standard library, and I did not want to use third-party ones just for this. But as it turns out, we do not even need them, because the task is so simple and Haskell’s string manipulation capabilities are incredible, so that we can solve this by implementing the search algorithm ourselves and still achieve good performance.</p>
<p>So, let us get on to some actual code. The most interesting part here is the matching algorithm:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">partOf ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, <span class="dt">Int</span>)
partOf _ []     r <span class="fu">=</span> (<span class="dt">False</span>, <span class="dv">0</span>)
partOf c (x<span class="fu">:</span>xs) r <span class="fu">|</span>    c <span class="fu">==</span> x <span class="fu">=</span> (<span class="dt">True</span>, r <span class="fu">+</span> <span class="dv">1</span>)
                  <span class="fu">|</span> otherwise <span class="fu">=</span> partOf c xs <span class="fu">$</span> r <span class="fu">+</span> <span class="dv">1</span>

<span class="ot">match ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> ([<span class="dt">Char</span>], [<span class="dt">Char</span>]) <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, [<span class="dt">Int</span>])
match i s <span class="fu">=</span> match&#39; i (snd s) []
  <span class="kw">where</span>
<span class="ot">    match&#39; ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, [<span class="dt">Int</span>])
    match&#39; []     _ r <span class="fu">=</span> (<span class="dt">True</span>, r)
    match&#39; (x<span class="fu">:</span>xs) s r <span class="fu">|</span> fst check <span class="fu">=</span> match&#39; xs (drop used s) <span class="fu">$</span> r <span class="fu">++</span> [used]
                      <span class="fu">|</span> otherwise <span class="fu">=</span> (<span class="dt">False</span>, r)
      <span class="kw">where</span>
        used <span class="fu">=</span> snd check
        check <span class="fu">=</span> partOf x s <span class="dv">0</span></code></pre></div>
<p>I know this is not really optimized for readability and especially not if you do not know Haskell, but stay with me, it is quite simple. Before we compare the input, we map all the possible solutions to lowercase and store them in a tuple like <code>(&quot;String&quot;, &quot;string&quot;)</code>. This way, we can compare against the lowercase version and return the properly capitalized one later on. All we do then is check for each possible solution if each character of the input string appears in order in the solution. If so, we add it to a list along with some data, specifically the position of the first match and the distance between the first and last matched character in the solution. This is the same Amjith did for sorting. All this data gets returned in a big list of tuples with both versions of the solutions and the match data. It is not pretty, but it works.</p>
<p>The one function the module actually exports is <code>fuzzyFinder</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fuzzyFinder ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [[<span class="dt">Char</span>]] <span class="ot">-&gt;</span> [[<span class="dt">Char</span>]]
fuzzyFinder input list <span class="fu">=</span> map fst <span class="fu">.</span> map snd <span class="fu">$</span> sort combo
  <span class="kw">where</span>
    combo <span class="fu">=</span> zip (zip ((map sum <span class="fu">.</span> map tail) scores) (map head scores)) matches
    scores <span class="fu">=</span> map snd <span class="fu">$</span> map (match input) matches
    matches <span class="fu">=</span> filter (fst <span class="fu">.</span> match input) <span class="fu">$</span> prepInput list</code></pre></div>
<p>All this function does is build the tuple list with the lowercase versions, toss it into the match function and filter out the correct versions from the matches that came back, ordering them by the match data in the same way Amjith did it. There are just a couple of extra lines that I omitted here because they are not important, but you can find the complete source on <a href="https://github.com/sulami/spielwiese/tree/master/hFuzzyFinder">Github</a>.</p>
<p>Now you might say, this cannot be fast, it is iterating through all this stuff and with big enough input it will take forever to present results. Let me show you this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readL ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]
readL a <span class="fu">=</span> read <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">++</span> a <span class="fu">++</span> <span class="st">&quot;]&quot;</span>

main <span class="fu">=</span> <span class="kw">do</span> args <span class="ot">&lt;-</span> getArgs
          <span class="kw">if</span> length args <span class="fu">==</span> <span class="dv">2</span> <span class="kw">then</span> <span class="kw">do</span>
            list <span class="ot">&lt;-</span> readFile <span class="fu">$</span> args <span class="fu">!!</span> <span class="dv">1</span>
            print <span class="fu">$</span> fuzzyFinder (args <span class="fu">!!</span> <span class="dv">0</span>) <span class="fu">$</span> readL list
          <span class="kw">else</span>
            putStrLn <span class="st">&quot;Wrong number of args&quot;</span></code></pre></div>
<p>This is a small program that takes two arguments, the query string and a file path of a list of possible solutions and performs the actions outlined above. Using a 2.2GHz Core 2 Duo, because I am using my laptop, and a 46K list containing over 5000 words (Thanks, Project Euler), this happens:</p>
<pre><code>λ time ./interactive roro ../hEuler/022.input
[&quot;ROBERTO&quot;,&quot;RODRIGO&quot;,&quot;ROSARIO&quot;,&quot;GREGORIO&quot;,&quot;RIGOBERTO&quot;]
./interactive roro ../hEuler/022.input  0.08s user 0.00s system 96% cpu 0.079 total</code></pre>
<p>The execution time goes up to 0.09 seconds when printing out really many names, but that is caused by the fact that we have to print out 100 lines or more to the console, which also takes time. But in my opinion, this is more than fast enough for auto-completion, which is the main use for fuzzy finders.</p>
<p>So overall, I am really happy with how this turned out. I was able to write this on one morning despite still learning the language. It is reasonably concise despite the fact that I did not use regular expressions but searched the strings manually and also quite fast.</p>]]></summary>
</entry>
<entry>
    <title>Staying Healthy as a Programmer</title>
    <link href="Staying Healthy as a ProgrammerStaying Healthy as a Programmer" />
    <id>Staying Healthy as a ProgrammerStaying Healthy as a Programmer</id>
    <published>2016-06-22T00:00:00Z</published>
    <updated>Staying Healthy as a Programmer</updated>
    <summary type="html"><![CDATA[<p><em>Disclaimer</em> In this post I link to some specific products. These links serve as examples and are by no means direct reccomendations. Some of these are just the result of a quick web search. If you decide to buy stuff, do your research, figure out what exactly you need and choose a product based on that.</p>
<p>One of the most important things in your life is your health. As programmers, and other professionals who mainly work at a desk, staying healthy can be surprisingly difficult, even though sitting all day seems not particularly demanding. Some of this risks can be avoided by consciously changing habits, but often the right equipment can also play a big role. You really should not skimp when it comes to maintaining your health. I will discuss some free, and also some non-free ways that can help you with that.</p>
<h2 id="repetitive-strain-injury">Repetitive Strain Injury</h2>
<p>There are several big health risks that programmers are affected by. The first one is <a href="https://en.wikipedia.org/wiki/Repetitive_strain_injury">repetitive strain injury</a>, which can happen to anyone and can completely stop you from coding if it gets too bad. The easiest way of preventing RSI is the right setup. You want your desk to be at the right height, so your elbows are at a right angle. Depending on the keyboard, a wrist rest can also be helpful. As a rule of thumb, if your hands or arms start hurting after several minutes of continuous typing, there’s something wrong.</p>
<p>No matter what you do, doing things as unnatural as typing for long periods of time is harmful to your body, like almost anything. So make sure to take regular breaks, and also do some <a href="https://www.youtube.com/watch?v=nmwqBMLVsjE">stretches</a> for your hands and arms.</p>
<p>You can also try using alternative keyboard layouts, although this is quite a big step. I switched to using <a href="https://colemak.com/">colemak</a>, which is still relatively close to QWERTY, on all my machines early this year, and it has helped me tremendously, but it also took me about 10 weeks using it full-time to get back to my own typing speed, and regain muscle memory for vim. Another popular alternative is <a href="https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard">dvorak</a>, which is more widely supported (read: on Windows without extra software), but radically differs from QWERTY.</p>
<p>If you want to go all out, there are also <a href="https://www.amazon.com/Microsoft-Natural-Ergonomic-Keyboard-4000/dp/B000A6PPOK/">various</a> <a href="https://ultimatehackingkeyboard.com/">kinds</a> <a href="https://www.kinesis-ergo.com/shop/freestyle2-for-pc-us/">of</a> <a href="https://ergodox-ez.com/collections/keyboards/products/ergodox-ez-keyboard">ergonomical</a> <a href="http://matias.ca/ergopro/pc/">keyboards</a>, which some people swear by. I haven’t had any personal experience with these, but I feel like being able to e.g. have your hands wider apart can make a big difference in your wrists, especially if you are typing for 6-8 hours a day.</p>
<h2 id="back-problems">Back problems</h2>
<p>Another problem many office workers have are posture and back problems, which can lead to chronic pain. Make sure your whole working environment is set up in a way that does not slowly kill you.<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote"><img src="http://www.metrophysicaltherapy.com/files/2014/02/workstation_426x418.jpg" title="fig:" alt="Proper posture illustration" /><br />
<br />
</span></span></p>
<p>A relativaly cheap solution I value very much are <a href="https://www.amazon.com/AmazonBasics-Single-Monitor-Display-Mounting/dp/B00MIBN16O/">monitor arms</a>, which are key to get both your monitor high enough to not to have look down at it and also your desk low enough to not strain your elbows and wrists while typing. An added bonus is the free space under the monitor. I personally prefer the desk mounted ones for flexibility reasons, and they also allow you to run the cables behind them, but wall mounting is also an option that can come in handy.</p>
<p>Another big part of your setup is your chair. Many office chairs are bad for your posture and do not support your lower back properly, encouraging you to lounge instead of sitting upright. Good chairs can be very expensive, the <a href="http://www.kabseating.com/office/product.asp?product=204">KAB Executive</a> retails for way above $1000, but I’d go as far and say it is worth that. I do not believe in saving money when it comes to my health. Also it is going to last a decade or more without problems. But you might not have this kind of money to spend on a chair, which I also fully understand. All I want is to make you think about how you sit in your chair, especially for long periods of intense concentration.</p>
<p>Another option can be a standing desk. There are many different ways of doing things, <a href="https://www.amazon.com/Adjustable-Height-Stand-Up-Desk-Monitor/dp/B00LNEB9KW/">fixed height standing desks</a>, <a href="https://www.amazon.com/LUXOR-Standup-CF48-DW-Stand-Crank-Adjustable/dp/B00PU6H5MA/">manually variable desks</a> and of course also <a href="https://www.amazon.com/Electric-Stand-Up-Desk-Charcoal/dp/B00XLRJSAW/">electrically operated ones</a>. In addition to that, there are also <a href="https://www.amazon.com/32-Wide-Standing-Desktop-Desk/dp/B015RXUV3U/">mini add-on desks</a> that you place on an existing desk. Standing makes it easier to keep a proper posture (and also burns some additional calories), but standing all day long is also bad for your back, so the proper mix between sitting and standing is important.</p>
<p>There is one more point, and it is perhaps the most important one I have to make: whatever you do, as an office worker on a desk, it is extremely important to take regular breaks, get up (or sit down), stretch a bit, go for a short walk. I would reccomend intervals of at most once per hour, better twice. This is important for your cardiovascular system (i.e. your heart), and can also help you think. Regular exercise of any kind is also something everyone should do. Go to the gym, running or ride a bicyle. Do something that makes you sweat two or three times a week, and your overall quality of life will skyrocket.</p>]]></summary>
</entry>
<entry>
    <title>Emacs From a Vim Addict&#39;s Perspective</title>
    <link href="Emacs From a Vim Addict&#39;s PerspectiveEmacs From a Vim Addict&#39;s Perspective" />
    <id>Emacs From a Vim Addict&#39;s PerspectiveEmacs From a Vim Addict&#39;s Perspective</id>
    <published>2016-03-03T00:00:00Z</published>
    <updated>Emacs From a Vim Addict&#39;s Perspective</updated>
    <summary type="html"><![CDATA[<p>I have been playing around in Emacs lately. Vim has been the core of my workflow for half a decade now, and I just cannot imagine going back to non-modal editing anymore. I will now explain, why I might just switch to emacs in the long-term.</p>
<p>If you compare Emacs and vim, you will see that vim’s modal philosophy is the clearly superiour one, but you will also find that vim is somewhat limited. It works quite well out of the box, and my current <code>.vimrc</code> is about 300 lines in size, most of that just setting options, defining shortcuts and loading plugins.</p>
<p>VimL tends to work for these things, but as soon as you start to change default behaviour and writing your own functions, it all falls apart. Vim does not know anything about its own state, there is no proper programmatical way to query it, and VimL as a language is extremely clunky and difficult to debug once you surpass simpe <code>set</code> statements. This shows for example in the built-in help, that consists of plain text files that display the default configuration.</p>
<p>Emacs on the other hand is pretty much just a Lisp interpreter with a simple text editor written in said Lisp running on top of it. Because the configuration is done on the same level that the editor itself is written on, in the same language, you can essentially completely replace all default behaviour, and emacs has a great framework to get the current state and configuration of the editor, because everything is just saved into variables. There is this funny quote about Emacs being a great operating system lacking a decent editor, and I find that it is pretty accurate.</p>
<p>Enter <a href="http://spacemacs.org/">Spacemacs</a>. Spacemacs is an Emacs distribution, meaning it is a prepackaged set of packages and configs that are supposed to more or less implement vim’s behaviour on the emacs platform and integrate well without having to write several thousand lines of Elisp yourself, which is what you might actually need, depending on how much of vim you want in Emacs.</p>
<p>Spacemacs got reccomended to me first by <a href="https://kritzcreek.github.io/">Kritzcreek</a> some time ago, and ever since I have been keeping an eye on it. I generally like to build my own configs and only stealing small parts from other people, but with default emacs being so different from the modal vim-like experience I want, it would take months to even come close to my vim setup. Spacemacs on the other hand comes with mostly sane defaults, and my overall custom config on top of its defaults is currently less that 100 lines of Elisp. I also want to mention <a href="http://blog.aaronbieber.com/">Aaron Bieber</a>’s <a href="https://www.youtube.com/watch?v=JWD1Fpdd4Pc">talk about evil-mode</a> for finally pushing me over the line and investing a weekend into learning enough emacs to be productive.</p>
<p>I am currently still in the progress of building my own emacs config from scratch, recreating the parts of Spacemacs I actually use, but I am not sure if I will ever get it to a point where it is even remotely as polished. Another factor of course is that I do not really want to waste too much time on this, and at least right now, Spacemacs does what I need it to do. In the end, you always have to think about if that extra bit of more custom behaviour is worth the time-investment to get it to work.</p>]]></summary>
</entry>
<entry>
    <title>Why You Need Fuzz Testing</title>
    <link href="Why You Need Fuzz TestingWhy You Need Fuzz Testing" />
    <id>Why You Need Fuzz TestingWhy You Need Fuzz Testing</id>
    <published>2016-02-23T00:00:00Z</published>
    <updated>Why You Need Fuzz Testing</updated>
    <summary type="html"><![CDATA[<p>Unittesting is an important part of building reliable software, although by far not the only one. But many programmers misunderstand the purpose of unittests. Classic unittests have two purposes: They force you to develop a spec and enforce it, and they can protect you against regression when refactoring or otherwise changing your code. Contrary to what some believe, they do not ensure correctness of your code.</p>
<p>Static unittests have one major flaw: The programmer has to write them. Any function working on a list is usually tested using some small examples and an empty list to make sure nothing breaks. This usually means you have to write 3-5 test cases per function to cover basic functionality. Not only is this a lot of work, it is also error-prone, because some cases are easily forgotten, especially because the programmer writing the tests for his code has a set of preconceived notions about how his code might be used.</p>
<p>But when writing any meaningful software, you usually have to deal with all kinds of data from outside, and a lot of that data is to be mistrusted. There might be changes in APIs, software errors somewhere else, or even a malicious attacker trying to breach your system, and all that data could look anything but the way you expect it to. This is why unittests should be used to employ a contract that the tested code has to follow, and fuzz testing can help you do just that.</p>
<p>Haskell with its amazing type system has a very nice way to do this. Have a look at this test:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">describe <span class="st">&quot;the finder&quot;</span> <span class="fu">$</span>
  it <span class="st">&quot;only returns proper superstrings of the search term&quot;</span> <span class="fu">$</span>
    forAll nonNull <span class="fu">$</span> \x <span class="ot">-&gt;</span> property <span class="fu">$</span>
      \y <span class="ot">-&gt;</span> <span class="kw">let</span> rv <span class="fu">=</span> finder x y
            <span class="kw">in</span> rv <span class="ot">`shouldBe`</span> filter (isSubsequenceOf x) rv</code></pre></div>
<p>This code is part of a fuzzy finder I am toying with, and it ensures that a basic fact about it is always true, the results should always be proper superstrings of the search term, and the search term in turn a proper substring of all results. I could write a bunch of test cases including input like <code>&quot;abcdef&quot;</code> or <code>&quot;123&quot;</code> and supply a list of possible results, then evaluate myself what the result should look like and just assert that the results are equal.</p>
<p>But that would not only result in a considerable increase in code, easily quadrupling the code above, it would also not cover all possibilities. Haskell’s type system ensures that the finder only gets used with strings and lists of strings, but strings can have many forms. Because all of the input is coming from the user, there might be punctuation in there, spaces, maybe escaped, maybe Unicode symbols, who knows. That is why I instruct the test suite to just generate random strings and lists of strings to use (see the <code>forAll nonNull</code>) and verify the property independently. This runs a default of 100 different sets of input, many of which are complicated messes of whitespace, backslashes and other special characters. If any of these break the test, the suite tells me which one, so I can find out what is the problem with a set of input and whether the contract I employed is incorrect, or the function tested does not follow the contract.</p>
<p>The current actual fuzzy finder uses six different property contracts that it needs to satisfy, each four to six lines in size. Testing all of these manually would lead to a gigantic test suite, and modifying the parameters of the input would be a huge hassle. With fuzz testing, I can just tweak the <code>nonNull</code> generator to use different rules to generate input, like limiting it to a certain character range or string length.</p>
<p>The bottom line here is, if your unittests are handwritten, you most likely cannot be sure your code is behaving in production. There is almost no way you can think of all the possible ways your code is going to be used, and even if you could, the amount of testing code would not be feasible.</p>]]></summary>
</entry>
<entry>
    <title>Why I Use Pomodoro</title>
    <link href="Why I Use PomodoroWhy I Use Pomodoro" />
    <id>Why I Use PomodoroWhy I Use Pomodoro</id>
    <published>2016-01-11T00:00:00Z</published>
    <updated>Why I Use Pomodoro</updated>
    <summary type="html"><![CDATA[<p>Almost every programmer knows what it means to get in the zone. That weird feeling you get at two in the morning while working on a side-project, when the the time flies by and suddenly all important features are done. Mastering the zone is a crucial element of maximizing your productivity, but it can also be quite difficult.</p>
<p>Because the being in the zone is a very fragile state, it is important to reduce the risk of falling out of it. That means both preventing interruptions by outside sources like coworkers (within reason) and playing your own <a href="http://mindingourway.com/not-yet-gods/">monkey brain</a> to stay focused by reducing the possible distractions, like closing all non-related windows/tabs.</p>
<p>These simple methods can work sometimes, but to <em>master</em> the zone and be able to reliably enter it almost at will, a more sophisticated solution is needed, a system. There are a great number of systems, and most of them are designed to dictate a structure for planning work, so they can help take the last bit of excess cognitive load off your mind, leaving you with just the next problem to solve to think about.</p>
<p>One of the more simple systems is <a href="http://pomodorotechnique.com/">Pomodoro</a>. Pomodoro in a nutshell is dividing work into relatively small tasks, spend 25 minute intervals working on these tasks and taking breaks in between. This approach forces you to focus on the task at hand, making it easier to get in the flow. It is also a rather simple system, you can read its Wikipedia page in two minutes and then start using it, and the overhead is very small, which is why I like using it for most of my coding.</p>
<p>If you have never used such a productivity system, I urge you to give Pomodoro a try, there is not really anything to lose, and possibly a lot to gain. You can also combine it relatively easily with larger-scale systems, like <a href="http://martinfowler.com/articles/newMethodology.html">Agile</a> or <a href="http://scrummethodology.com/">Scrum</a>.</p>]]></summary>
</entry>
<entry>
    <title>Data-Pipelines in Haskell</title>
    <link href="Data-Pipelines in HaskellData-Pipelines in Haskell" />
    <id>Data-Pipelines in HaskellData-Pipelines in Haskell</id>
    <published>2015-12-07T00:00:00Z</published>
    <updated>Data-Pipelines in Haskell</updated>
    <summary type="html"><![CDATA[<p>Today I was writing some code in Golang and thought about why Haskell feels so much more powerful and expressive. Then I had a revelation. Haskell follows the UNIX philosophy, focussing on small functions that do exactly one thing (at least good Haskell code does so). It also makes these functions easily combinable without leading to syntastic noise like parenthesis-mountains. So I thought I might just write a post highlighting that, which is what you are currently reading.</p>
<p>We are going to start at the very basics, assuming you have little to no prior knowledge about Haskell. Haskell uses the <a href="https://en.wikipedia.org/wiki/Lambda_calculus#Lambda_calculus_and_programming_languages">lambda calculus</a> and just whitespace to declare function arguments. So a function call looks like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">add <span class="dv">2</span> <span class="dv">3</span> <span class="co">-- 2 + 3 = 5</span></code></pre></div>
<p>If one of your arguments is actually the return value of another function call with arguments, you will need to add parentheses to tell your compiler which arguments belong to which function call, like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">add <span class="dv">5</span> (add <span class="dv">1</span> <span class="dv">3</span>) <span class="co">-- 5 + (1 + 3) = 9</span></code></pre></div>
<p>Haskell functions often take arguments in an order so that the last argument is often the “main” one that is being used, which plays nicely with the <code>$</code> operator that is part of Prelude, the part of the Haskell standard library that gets imported automatically. <code>$</code> has the type <code>(a -&gt; b) -&gt; a -&gt; b</code> which looks sort of pointless, but in practise you can use it to build function pipelines without having to use parentheses.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">add <span class="dv">5</span> <span class="fu">$</span> add <span class="dv">1</span> <span class="dv">3</span> <span class="co">-- 5 + (1 + 3) = 9</span></code></pre></div>
<p>Note that in this code, <code>add 5</code> is a function that takes one argument, because one is already supplied. Its type is <code>Int -&gt; Int</code> compared to the original <code>Int -&gt; Int -&gt; Int</code>. And because Haskell has easy function composition using the <code>.</code> operator (<code>(b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c</code>), we can chain several functions in front of a <code>$</code>, building a reverse data pipeline like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">add <span class="dv">5</span> <span class="fu">.</span> subtract <span class="dv">3</span> <span class="fu">.</span> times <span class="dv">2</span> <span class="fu">$</span> add <span class="dv">1</span> <span class="dv">3</span> <span class="co">-- (((1 + 3) * 2) - 3) + 5 = 10</span></code></pre></div>
<p>As you can see, the data flows from the right side to the left. But coming back to the UNIX philosophy, there are also data pipelines, pipes. But in shell-pipes, data flows from left to right, which might be more intuitive. Note that in the last explanation I had to reverse the order because of the subtraction. We can fix this quite easily by defining a new operator, the “reverse <code>$</code>”:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(&amp;) ::</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b
x <span class="fu">&amp;</span> f <span class="fu">=</span> f x</code></pre></div>
<p>Note that the type annotation is the same as the one of <code>$</code> with just the arguments reversed. This specific operator is already defined in many community-made packages. It allows us to mimic the shell-pipe very closely:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">add <span class="dv">1</span> <span class="dv">3</span> <span class="fu">&amp;</span> times <span class="dv">2</span> <span class="fu">&amp;</span> subtract <span class="dv">3</span> <span class="fu">&amp;</span> add <span class="dv">5</span> <span class="co">-- (((1 + 3) * 2) - 3) + 5 = 10</span></code></pre></div>
<p>Now the explanation looks just like the code, and data flows from left to right, just like in the shell. These data pipelines make it easy to let small functions like <code>words</code>, <code>lines</code> or <code>map</code> work on data and pass the results to the next function, without having to worry about memory management, buffer overflows or even types, which makes this more robust than a shell-oneliner while being just as expressive and simple. Haskell’s laziness even allows for simple parallelism like the shell does when piping data, where functions/programs start working as soon as the first data reaches them.</p>
<p>This concept is so great, there is even a huge library to do this while doing I/O like when accessing files or communicating over a network, <a href="https://www.fpcomplete.com/user/snoyberg/library-documentation/conduit-overview">Conduit</a>.</p>]]></summary>
</entry>

</feed>
