<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>sulami's blog</title>
    <link href="https://sulami.github.io/atom.xml" rel="self" />
    <link href="https://sulami.github.io" />
    <id>https://sulami.github.io/atom.xml</id>
    <author>
        <name>Robin Schroer</name>
        <email>sulami@peerwire.org</email>
    </author>
    <updated>Working remotely (Part 2)</updated>
    <entry>
    <title>Working remotely (Part 2)</title>
    <link href="Working remotely (Part 2)Working remotely (Part 2)" />
    <id>Working remotely (Part 2)Working remotely (Part 2)</id>
    <published>2018-11-05T00:00:00Z</published>
    <updated>Working remotely (Part 2)</updated>
    <summary type="html"><![CDATA[<p>It has now been 48 days since the first part of this post, and 42 days since I moved into my current flat in Amsterdam. Time for me to write the promised follow-up and explain what has happened so far and how things have been going.</p>
<h2 id="the-good">The Good</h2>
<p>First of all, I am a lot happier in my personal life, moving was definitely the right decision for me in general, all work things aside. Having made the step into a remote agreement frees me up to move when- and wherever I want, as my employer does not care about from where I actually work at this point, apart from timezone-related concerns.</p>
<p>I also think that full control over my workspace can drastically improve my productivity, the main benefit being the lack of distractions.</p>
<p>Last time I mentioned that I would go back to London once a month. So far I am keeping to this schedule, and my first visit has been quite pleasant, even if a little stressful. But being able see my team members in person, catching up and meeting new hires allows us to stay more in touch. My only minor complaint is that travel is quite a hassle, especially at this rate, so I might try to turn down the frequency a bit.</p>
<h2 id="the-bad">The Bad</h2>
<p>After the moving process, which included being legally homeless for a weekend in France, I was quite happy to be able to stay home for a bit, so I ended up working from my living room for a couple of weeks. In addition to that, coworking spaces are (to me) surprisingly expensive for what they are.<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">200€/mo. for something they call “a desk” but in reality is just a slot at a table, electricity, wifi and access to a kitchen with free coffee is quite a lot in my opinion. If I wanted an actual desk and office chair, ideally with a set of walls around it, I can expect to pay at least twice that.<br />
<br />
</span></span> But after a while I started suffering from both cabin fever and loneliness, so I bit the bullet and subscribed to one. This also ended up being the right decision, because just the way I wrote the last time, I have a physical location I can go to to work, but it is purely optional.</p>
<p>In addition to potential extra costs and stress due to more traveling, some employers also seem to think that remote workers should by default earn less than the ones coming into the office. It is true that remote work in and of itself can be seen as a perk, but I also believe that correctly executed remote work is beneficial to everyone involved.</p>
<h2 id="closing-notes">Closing Notes</h2>
<p>If you want to go remote I recommend you do what I (we) did and get a remote working agreement that is signed by you and your employer. It should capture the terms of the remote work, such as work hours, visits, who pays for transport and how long much in advance a warning needs to be given for you to be called into the office.</p>
<p>The last point is quite important especially if you are expected to pay for transport (and possibly lodging) which can be much more expensive if booked spontaneously.</p>]]></summary>
</entry>
<entry>
    <title>Running Clojurescript Tests on the JVM</title>
    <link href="Running Clojurescript Tests on the JVMRunning Clojurescript Tests on the JVM" />
    <id>Running Clojurescript Tests on the JVMRunning Clojurescript Tests on the JVM</id>
    <published>2018-10-01T00:00:00Z</published>
    <updated>Running Clojurescript Tests on the JVM</updated>
    <summary type="html"><![CDATA[<p>Recently I have been writing a lot of Clojure and Clojurescript for my side projects. This is my first post on the language &amp; ecosystem, so I what follows below might be very wrong in places. Nontheless I want to share something I worked out myself and might be useful to someone else. The topic we’re going to be looking at is running (unit) tests for a <a href="https://github.com/Day8/re-frame">re-frame</a>-based Clojurescript application, though it actually applies to almost any CLJS application.</p>
<p>Last week I was finally adding tests to one of my side projects<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Way too late as well, I should have <a href="https://www.obeythetestinggoat.com">obeyed the testing goat</a>. I had quite some trouble untangling my wild-west design to be able to even write proper unit tests.<br />
<br />
</span></span> and I was wondering how to run them easily. Clojure comes with a great bulid tool, <a href="https://leiningen.org">leiningen</a>, which allows you to run tests quite easily, at least for Clojure code.</p>
<h2 id="ways-to-run-tests">Ways to Run Tests</h2>
<p>Now the way I run my code is by compiling my code to Javascript, launching a browser session through Leiningen, and running my code in the browser’s runtime. This works very well for actually running the code using <a href="https://github.com/bhauman/lein-figwheel">figwheel</a>, but less well for running tests.</p>
<p>The first reason this is a bit impractical is because it requires a lot of setup to actually make it work, you need to update your <code>project.clj</code> to have a testing build, which needs proper cleaning up as well, and then somehow manage the browser runtime as well. Depending on how you do this, this also incurs heavy startup time penalties.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Full test compiles from CLJS to JS for a small test suite (~20 test cases) already takes about 5-10 seconds.<br />
<br />
</span></span></p>
<p>To avoid the browser, which is just unnecessarily heavyweight if all you need is just a JS runtime, the go-to solution used to be <a href="http://phantomjs.org">PhantomJS</a>, a headless browser that can be used for various tasks that do not require an actual human seeing rendered output. Sadly, PhantomJS suspended development earlier this year due to lack of active contributors, so I am not very confident in building on top of it, especially considering the speed at which the web and standards are currently changing.</p>
<p>While PhantomJS comes with a whole DOM emulation, what we are actually looking for is only a JS runtime, for reasons that will become apparent later. This leads us to <a href="https://nodejs.org/en/">Node.js</a>, which is exactly that, a stand-alone JS runtime. Running tests inside Node is quite a viable option, as it does not impose any meaningful startup time penalty by itself, meaning we can just start it up fresh for every test run and not <a href="https://twitter.com/garybernhardt/status/1007699556832817152">have to deal with persistence and state</a>.</p>
<p>We could stop there, write a custom test build target and a custom test command that just runs that file for Leiningen and be done with it. But we still have the compilation time to JS which is just too long if you want to have a very tight TDD loop. Then I realised that we do not actually need to compile to JS at all, in the end we just want to test Clojure code, which can run on a variety of different platforms.</p>
<p>One of the fastest platforms available to us is the original platform Clojure targeted, the JVM. Because I am using Emacs with <a href="https://github.com/clojure-emacs/cider">CIDER</a>, I already have a long-running JVM<span><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle"/><span class="sidenote">I know we are back to long-running processes, which is a bit unfair, but CIDER allows me to basically instantaneously reload the whole project, which so far worked without any hiccups.<br />
<br />
</span></span>, I do not even have to consider the ~1s startup time the JVM incurs. This setup allows us to run tests in well under one second, but leads me to the next section.</p>
<h2 id="the-theory-decoupling-logic-from-presentation">The Theory: Decoupling Logic from Presentation</h2>
<p>If we want to run our Clojure code, which does not specify a target platform, on the JVM, we cannot depend on any platform-specific features. This means, our Clojurescript application needs to be split into platform-independent Clojure code and Clojurescript glue code. Incidentally, this is also the structure TDD favours and I think that leads to the code easiest to reason about.</p>
<p>re-frame does come with an <a href="https://github.com/Day8/re-frame/blob/master/docs/Testing.md#exposing-event-handlers-for-test">example of how to expose event handlers for tests</a>, which are the part of our application that should contain the bulk of the application logic. The basic gist is this: any kind of state should be mutated by passing it into a pure function, which just returns the new, modified state. Every variable is state.<span><label for="sn-4" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-4" class="margin-toggle"/><span class="sidenote">Ideally abandon the idea of a variable as well, default to immutable values everywhere.<br />
<br />
</span></span> Then use the most basic glue code you can come up with to glue this together.<span><label for="sn-5" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-5" class="margin-toggle"/><span class="sidenote">This is really just functional programming, which has been around for over half a century.<br />
<br />
</span></span></p>
<p>This allows us to then test the application logic in isolation, by just passing a piece of state into a function and checking properties on the returned value. If it makes sense, we can also use properties to randomly generate a huge amount inputs according to some rules and make sure that we do not forget any edge cases we did not think of writing tests for. Because none of this code actually depends on anything related to the presentation, it does not matter whether it runs in a browser or on the JVM.</p>
<h2 id="the-practice-the-implementation-of-re-frame-tests">The Practice: The Implementation of re-frame Tests</h2>
<p>In order to be able to run Clojure code on the JVM, it cannot be Clojurescript code, meaning it cannot reside in <code>.cljs</code> files and cannot use CLJS-specific libraries, but some of your code will invariably be specific to Clojurescript, like for example</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> foo.bar
  (<span class="at">:require</span> [cljs.spec.alpha <span class="at">:as</span> s]))</code></pre></div>
<p>needs to be</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> foo.bar
  (<span class="at">:require</span> [clojure.spec.alpha <span class="at">:as</span> s]))</code></pre></div>
<p>to work on the JVM. This can be solved quite easily by using <a href="https://clojure.org/guides/reader_conditionals">reader conditionals</a>. The basic idea is to save your application logic in Common Clojure (<code>.cljc</code>) files, write the wrapper around your application in Clojurescript (<code>.cljs</code>) and your test suite in Clojure (<code>.clj</code>). Within Common Clojure you have access to reader conditionals which are a feature in Clojure &gt;= 1.7 which allow modifying code at “compile-time”<span><label for="sn-6" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-6" class="margin-toggle"/><span class="sidenote">I do not actually know in depth how this works behind the scenes yet, but I believe this is a fair approximation even if potentially inaccurate.<br />
<br />
</span></span> depending on the compilation target. This is what it looks like in action:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> foo.bar
  (<span class="at">:require</span> #?(<span class="at">:clj</span>  [clojure.spec.alpha <span class="at">:as</span> s]
               <span class="at">:cljs</span> [cljs.spec.alpha <span class="at">:as</span> s])))</code></pre></div>
<p>Once we are at this point, writing the actual tests is quite easy. I am going to borrow an example from the <a href="https://github.com/Day8/re-frame/blob/master/docs/Testing.md">re-frame docs</a> here:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">let</span> [
      <span class="co">;; setup - cummulatively build up db</span>
      db (<span class="kw">-&gt;</span> {}    <span class="co">;; empty db</span>
             (initialise-db [<span class="at">:initialise-db</span>])   <span class="co">;; each event handler expects db and event</span>
             (clear-panel   [<span class="at">:clear-panel</span>])
             (draw-triangle [<span class="at">:draw-triangle</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">3</span>]))

      event  [<span class="at">:select-triange</span> <span class="at">:other</span> <span class="at">:stuff</span>]

      <span class="co">;; now execute the event handler under test</span>
      db&#39;    (select-triange db event)]

      <span class="co">;; validate that db&#39; is correct</span>
      (<span class="kw">is</span> ...)</code></pre></div>
<p>In this example, <code>db</code> is the global state map, which gets passed into a chain of pure event handler functions, after which the returned new state can be validated. All we need to do to run these is set a <code>:test-paths</code> setting in <code>project.clj</code> and <code>lein test</code> will pick up the tests.</p>]]></summary>
</entry>
<entry>
    <title>Working Remotely (Part 1)</title>
    <link href="Working Remotely (Part 1)Working Remotely (Part 1)" />
    <id>Working Remotely (Part 1)Working Remotely (Part 1)</id>
    <published>2018-09-18T00:00:00Z</published>
    <updated>Working Remotely (Part 1)</updated>
    <summary type="html"><![CDATA[<p>As of next week I will be full-time working remotely again, after having worked on-site for almost two years now. This weekend I will be moving from London back to what they call Europe or the continent here in London, specifically Amsterdam.<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Even though it does play a minor role, this is not directly due to Brexit and more a personal lifestyle choice.<br />
<br />
</span></span> As I worked full-time remotely before, two years ago, I have some experience and I want to lay out my ideas and plans to make this a successful endeavour. Part two will be published in a few weeks and give an update on how things are going once I settled in.</p>
<h2 id="how-this-came-to-happen">How This Came to Happen</h2>
<p>As I mentioned above, I am moving for non-work related reasons, but part of me is also looking forward to not having to commute or spending days inside an open-plan office. Over the last couple of months I have transitioned to work usually one day per week from home, so this is definitely a benefit in my book. I also have to thank my current employer, <a href="https://ostmodern.co.uk">Ostmodern</a>, for being really accommodating in this regard. When I approached them about moving countries, but still wanting to stay with them, they were directly on board. We wrote up a special agreement that states modifies my normal contract and defines the parameters of our new employment relationship.</p>
<h2 id="difficulties-i-expect-and-prevention-strategies">Difficulties I Expect and Prevention Strategies</h2>
<p>When I moved to London to work on-site, I did so not only because it was significantly easier, at least at the time, to find a job on-site rather then remotely, but also because I felt quite disconnected from my colleagues who I only got to meet in person every couple of months. From time to time I would also feel a bit lonely, working all by myself.</p>
<p>To circumvent these issues, we have agreed upon not only daily video conferences, but also for me to come in once a month for two days to spend some time with the rest of the team, have face-to-face meetings and catch ups and just feel more involved. This should also help the rest of the team to not just see me as an entity reachable via Slack or email.</p>
<p>In addition to that, I am actually not moving by myself, but I am taking a good friend and my closest team member with me, so I will have someone physically present most of the time to bounce ideas off.</p>
<p>Another problem I experienced before was having a hard time separating work and private life, which can have negative impacts on both. The solution for these I think is quite simple and obvious, I will rent a coworking space and artificially commute there at least most of the time. This way I can focus on getting work done while there and also leave work behind once I get home. Because I get total freedom in this, I can still work from home if the weather is terrible or I do not feel like going outside, and I get to pick the exact length of commute I want.</p>
<p>Lastly I am foreseeing a new problem I have not faced in this way before, and this is related to the fact that I now lead a small team and own several products, one of them being our core backend platform. This makes me the central entry point for a lot of people from other teams, and I am usually the person invited to meetings where some platform knowledge is required. We decided that I am going to keep both of these responsibilities, but we are going to install an ambassador who is going to be working on-site and will be easier to talk to. This ambassador is a fellow senior backend engineer who I will catch up with regularly to make sure we are both on top of things.</p>
<h2 id="where-to-go-from-here">Where to Go from Here</h2>
<p>I will be moving this upcoming weekend, as of time of posting, and resume working as soon as possible next week. As mentioned in the beginning, there will be a follow-up post in a couple of weeks, once the dust (and I) has settled, where I will draw some conclusions on the predictions I made above and write about what works and what does not.</p>]]></summary>
</entry>
<entry>
    <title>Pipes in Python</title>
    <link href="Pipes in PythonPipes in Python" />
    <id>Pipes in PythonPipes in Python</id>
    <published>2018-08-21T00:00:00Z</published>
    <updated>Pipes in Python</updated>
    <summary type="html"><![CDATA[<p>I just found <a href="https://hackernoon.com/adding-a-pipe-operator-to-python-19a3aa295642">an article about pipes in Python</a> on lobste.rs and was reminded that I was toying with the exact same thing recently. Using a lot of functional languages (mainly Haskell, Clojure, Elixir)<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">… but being paid to write (mostly highly object-oriented) Python four out of five days a week. We do use some Elixir at my place, but we are still a Python shop first.<br />
<br />
</span></span> and also a fair bit of bash, I am very used to streaming data through chains of functions using pipe-like constructs. Python does make this quite difficult and encourages a more imperative approach with intermediate variables.</p>
<p>The author of the article above uses AST rewriting, which I have to admit is very clever, though hard to introspect and extend unless you are already familiar with AST manipulation in Python.</p>
<p>My approach is slightly different, and yields a less pretty syntax, but is arguably more flexible and extensible, by using a plain function. The definition currently looks like this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">def</span> pype(x, <span class="op">*</span>fs):
    <span class="co">&quot;&quot;&quot;</span>
<span class="co">    Pipe function. Takes an initial value and any number of functions/methods.</span>
<span class="co">    Methods as strings. Additional args are supported for functions &amp; methods</span>
<span class="co">    by suppling a step as a tuple/list with function/method as the first</span>
<span class="co">    element and the args as the rest. The pipe input is used as the last</span>
<span class="co">    argument in this case. Currently no kwargs.</span>
<span class="co">    &quot;&quot;&quot;</span>
    <span class="cf">while</span> fs:
        f <span class="op">=</span> fs[<span class="dv">0</span>]
        args <span class="op">=</span> []
        <span class="cf">if</span> <span class="bu">isinstance</span>(f, (<span class="bu">list</span>, <span class="bu">tuple</span>)):
            args <span class="op">=</span> <span class="bu">list</span>(f[<span class="dv">1</span>:])
            f <span class="op">=</span> f[<span class="dv">0</span>]
        <span class="cf">if</span> <span class="bu">isinstance</span>(f, <span class="bu">str</span>):
            <span class="cf">if</span> f.startswith(<span class="st">&#39;.&#39;</span>):
                x <span class="op">=</span> <span class="bu">getattr</span>(x, f[<span class="dv">1</span>:])(<span class="op">*</span>args)
            <span class="cf">else</span>:
                x <span class="op">=</span> x[f]
        <span class="cf">elif</span> <span class="bu">isinstance</span>(f, <span class="bu">int</span>):
            x <span class="op">=</span> x[f]
        <span class="cf">else</span>:
            x <span class="op">=</span> f(<span class="op">*</span>args <span class="op">+</span> [x])
        fs <span class="op">=</span> fs[<span class="dv">1</span>:]
    <span class="cf">return</span> x</code></pre></div>
<p>The docstring is a bit abstract, so I think an example is much more explanatory:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="im">from</span> pype <span class="im">import</span> pype

<span class="kw">def</span> add_suffix(number, s):
    <span class="cf">return</span> <span class="st">&#39;</span><span class="sc">{}</span><span class="st"> is </span><span class="sc">{}</span><span class="st"> cool!&#39;</span>.<span class="bu">format</span>(
        s,
        <span class="st">&#39; &#39;</span>.join(<span class="st">&#39;very&#39;</span> <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(number))
    )

pype(
    <span class="st">&#39;   abc: </span><span class="sc">{}</span><span class="st">   &#39;</span>,
    <span class="st">&#39;.strip&#39;</span>,
    (<span class="st">&#39;.format&#39;</span>, <span class="dv">3</span>),
    (add_suffix, <span class="dv">2</span>),
    <span class="st">&#39;.upper&#39;</span>,
)

<span class="co"># &#39;ABC: 3 IS VERY VERY COOL!&#39;</span></code></pre></div>
<p>I am aware this is a very constructed example, but you get the idea. It currently does not handle keyword arguments, and you cannot specify in which place you would like the input argument to go, it always takes the last slot, which isn’t always convenient, but this way you can avoid using <code>lambda</code>s everywhere, which are quite long in Python<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">I quite enjoy Elixir’s solution: <code>&amp;func(1, &amp;1, 3)</code>, <code>&amp;1</code> being the placeholder.<br />
<br />
</span></span>.</p>
<p>I might extend this further in the future and maybe introduce it into some code bases of mine, if it turns out to be useful.</p>]]></summary>
</entry>
<entry>
    <title>How this blog is made</title>
    <link href="How this blog is madeHow this blog is made" />
    <id>How this blog is madeHow this blog is made</id>
    <published>2018-07-26T00:00:00Z</published>
    <updated>How this blog is made</updated>
    <summary type="html"><![CDATA[<p>While this blog has always been powered by a static-page generator, a while ago I switched from using <a href="https://blog.getpelican.com/">Pelican</a>, a Python-based generator, to <a href="https://jaspervdj.be/hakyll/">Hakyll</a>, a Haskell-based one. There was no real practical reason for this, and objectively the switch has been a huge waste of time, though I have learned a lot about Haskell and am very happy with how this blog currently works.</p>
<p>The basic setup is quite simple, I am using <a href="https://docs.haskellstack.org/en/stable/README/">Stack</a> to manage build dependencies and sandboxing for Haskell<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">This is actually one of my basic requirements for new languages that I pick up. It is 2018, you can ship your language with a package manager that sandboxes by default. One of my biggest problems with Python is virtualenv.<br />
<br />
</span></span>. For reasons that become clear later in this post, I also need a LaTeX installation, which currently is not managed in any way, but I do not require anything out of the ordinary, so usually it is just a matter of install ing the distribution for my operating system.</p>
<h2 id="hakyll-hacks">Hakyll Hacks</h2>
<p>To achieve a nice, human-readable URL scheme I am not only generating a slug from the original file name, which usually matches the title, but to get rid of the ugly <code>.html</code> postfix I actually render all pages and posts to <code>index.html</code> files in directories with the corresponding name, resulting in URLs with trailing slashes. Credit for this goes to <a href="https://www.rohanjain.in/hakyll-clean-urls/">Rohan Jain</a>.</p>
<p>Of course this blog also has an Atom feed<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Atom vs. RSS has been <a href="https://nullprogram.com/blog/2013/09/23/">debated for a while</a>, in the end my use case is super simple anyway, so I am just using Atom until I find an actually valid reason to get into comparing the two formats.<br />
<br />
</span></span>, so you can follow my posts in your favourite newsreader, or use Firefox live bookmarks for example. I ran into one particular problem with this though, as one of my recent posts included an ampersand (&amp;) in the title. The rendered feed file (no matter the format) would be invalid due to this. So I had to implement <a href="https://en.wikipedia.org/wiki/Percent-encoding">URL encoding</a> for titles myself (this is already done for the body by Hakyll). Thanks to the way Hakyll embraces the Haskell philosphy, this was just a matter of mapping the encoding function over the post titles for the feed output.</p>
<h2 id="symetric-html-pdf-output">Symetric HTML &amp; PDF output</h2>
<p>A long while ago I had the idea of making my CV available online in the browser, like many front end developers do to showcase their skills. At the same time I still need a PDF version that can be printed neatly. Being a developer, I of course cannot fathom the idea of having two sets of CVs, so I thought why not generate both versions from the same source (of truth), using one single build process. So that is what I am currently finalising.</p>
<p>The HTML version for the website is just a static page in the blog, simple enough. Hakyll gives me very fine-grained control over the actual build process, so I can leverage custom Markdown tags to control layout if I need to. The PDF version of my CV has always been generated using <a href="https://www.latex-project.org/">LaTeX</a>, because it generates beautifully rendered output in a reproducible fashion. Because I am using <a href="http://pandoc.org/">Pandoc</a> to generate HTML from the Markdown source, I am also using it to generate the LaTeX source code from the same source, and then just pass it into a LaTeX template. Then I just run <code>xetex</code> in a subprocess to render the final PDF.</p>
<h2 id="deployment">Deployment</h2>
<p>This blog is currently hosted in two locations, <a href="https://pages.github.com/">Github Pages</a> which I have been using for many years, and <a href="https://docs.gitlab.com/ee/user/project/pages/">GitLab pages</a>, which I only added recently. While the build and deployment process for these two platforms is slightly different, they mostly work off the same codebase, with the only difference being a <a href="https://github.com/sulami/sulami.github.io/blob/develop/Makefile">makefile for Github</a> being replaced by the <a href="https://gitlab.com/sulami/sulami.gitlab.io/blob/develop/.gitlab-ci.yml">GitLab-specific build file</a>. The Github version I generate locally with my locally compiled Hakyll, and then push the the right branch using the makefile. This makefile also allows me to run a local server to preview the rendered output before committing. The GitLab repository is setup to mirror the one on GitHub and rebuild via GitLab CI on every change, so it is compiling the Hakyll application in a Docker container and the generating the output.</p>
<p>These two build processes have different pros and cons. The GitHub version is available slightly faster, as my local render only takes a couple of seconds and after pushing I just have to wait for Github’s cache to refresh, which usually takes only a couple of minutes, while the GitLab version has to run the CI job which takes a couple of minutes. On the upside the GitLab version does not require me to have a locally installed version of Haskell, Stack or anything else, as long as I can push to the repository, allowing me to explore workflows which happen end-to-end on iOS. I have been investigating this exact workflow, using a combination of <a href="https://itunes.apple.com/us/app/ia-writer/id775737172">iA Writer</a>, <a href="https://itunes.apple.com/us/app/workflow/id915249334">Workflow</a> and <a href="https://itunes.apple.com/us/app/working-copy/id896694807">Working Copy</a> to write, transform and push the posts, leaving the build process to GitLab CI.</p>
<p>If you are interested in details, have a look at the source on either <a href="https://github.com/sulami/sulami.github.io">Github</a> or <a href="https://gitlab.com/sulami/sulami.gitlab.io">GitLab</a>.</p>]]></summary>
</entry>
<entry>
    <title>Does popularity matter when choosing a stack?</title>
    <link href="Does popularity matter when choosing a stack?Does popularity matter when choosing a stack?" />
    <id>Does popularity matter when choosing a stack?Does popularity matter when choosing a stack?</id>
    <published>2018-06-29T00:00:00Z</published>
    <updated>Does popularity matter when choosing a stack?</updated>
    <summary type="html"><![CDATA[<p>Recently there has been a lot of turmoil around <a href="https://github.com/vuejs/vue">Vue.js</a> <a href="https://hasvuepassedreactyet.surge.sh">reaching the same number of stars on GitHub</a> as <a href="https://github.com/facebook/react">React</a>. While stars on GitHub are far from a reliable indicator of actual popularity and size of user base, it does raise the question whether these should actually matter when choosing a stack for a new piece of software.</p>
<p>The easy answer is that it should not really matter. Especially if you are working in a somewhat specialised environment or are under a lot of constraints, like low-power hardware or strict performance requirements, you will probably end up using a very domain-specific set of tools. A language like Kotlin is the recommended way forward if you are developing an android application, but looking at the <a href="https://www.tiobe.com/tiobe-index/">TIOBE index</a><span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">I have to mention that I believe the TIOBE index to be a bit biased though, not that I was perfectly objective. The overall “winner” of 2013 is Transact-SQL, a language many programmers will not even have heard of.<br />
<br />
</span></span>, and still it only comes in at position 49 at the time of writing, so obviously popularity cannot matter more than platform constraints.</p>
<p>Another quite important factor is the already present repertoire of tools. Many tools, especially languages and large frameworks, like Vue.js and React, require rather large upfront learning efforts before they can be used efficiently. If you already know React inside out, why would you learn Vue, assuming it fundamentally does not enable you to do anything React does not? I am currently paying for my food by writing code in a primarily Python/Django environment, and sometimes I look over at the neat lawn the Ruby on Rails crowd seems to have, but it would not be wise of me to invest a sizeable amount of time to switch ecosystems without actually gaining much.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Apart from that Python is also larger and growing in comparison to Ruby. Ruby is probably not dying anytime soon, but it is definitely declining since the days when everything was Rails, much to my dismay.<br />
<br />
</span></span></p>
<p>I can already hear you type your furious <a href="https://twitter.com/_sulami_">tweets at me</a>, claiming how popularity of course makes a difference. And you are not wrong, there are very valid arguments to be made.</p>
<p>Popularity does indeed matter when you chose a technology to use, for example if you need to add support for a new data format and shop around for libraries. Especially in the open-source world a larger user base means more eyes scanning the code for bugs, more potential contributors keeping the software updated and supplying it with new features, and better chances it will stay maintained overall. If you use a common set of softwares, chances are they can interact easily in some way, saving you time for integrating them. All of these are important factors which should be considered when making a voice of tooling.</p>
<p>In the end there is no single deciding factor to look at, like for example popularity, but instead a lot of different ones. It is crucial to recognise all of them and think about how to weight them in importance. Newer (and shiny) tools might offer significant gains, but come at the price of a smaller community, so less support and a higher risk of abandonment.</p>]]></summary>
</entry>
<entry>
    <title>React Native &amp; ClojureScript - An obscure stack</title>
    <link href="React Native &amp; ClojureScript - An obscure stackReact Native &amp; ClojureScript - An obscure stack" />
    <id>React Native &amp; ClojureScript - An obscure stackReact Native &amp; ClojureScript - An obscure stack</id>
    <published>2018-06-15T00:00:00Z</published>
    <updated>React Native &amp; ClojureScript - An obscure stack</updated>
    <summary type="html"><![CDATA[<p>I have been working on a new side project for about two months now, a task manager app which is primarily aimed at iOS. This is a typical “scratching my own itch” side project. There are plenty of task manager apps on the App Store, but none of them seems to do exactly what I would like mine to do.<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Of course I cannot disclose the exact of features at this point, both because I’m really slow at development and also because a lot is still work in progress. I can say that none of the big ones (top 200 productivity) does everything I want.<br />
<br />
</span></span></p>
<p>My technical requirements are not outlandish, I need access to the system calendar, location services, trigger notifications, and that is about it. Performance should of course be great, but considering that we are talking about an app that essentially boils down to a lot of tables, and I know my way around handling large amounts of data, I am not worried about that.</p>
<p>Originally I started developing this app in Swift, using XCode for development. Apart from having to fight with a somewhat buggy vim-plugin for Xcode, package management for mobile environments on Swift is a big mess, though I managed to load in the libraries I needed in the end. Then there is Swift, which especially in the way Apple wants you to write apps, using the visual interface designer and <a href="https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1">control-dragging buttons into source files</a>, is not ideal. It feels unnecessarily low level in a lot of places, and the default project structure promotes a rather imperative style, without any real solution to manage state in a sensible way.</p>
<p>So after having built a first prototype in the classic way on Swift, I decided to have a look around at alternatives. I did not want to use <a href="https://cordova.apache.org">Cordova</a>, which is essentially the Electron of mobile platforms, running your JS code inside a fullscreen browser. While I am not worried about performance, I could see this additional runtime layer making the whole UI less snappy. So I had a look at <a href="https://facebook.github.io/react-native/">React Native</a>, a framework based on React which compiles to native platform code through some magic. React is currently used at my workplace (along with some legacy Angular code), so I have access to some <a href="https://github.com/inestavares">experienced</a> React <a href="https://github.com/bradlocking">developers</a> to help me at least for conceptual understanding, which was quite helpful.</p>
<p>While I have been interested in getting a bit more frontend experience, the prospect of having to write a lot of Javascript still was not overly compelling, so I had another quick look around whether some of the languages that compile to Javascript allow for easy integration with React Native. While there are some <a href="https://github.com/ohanhi/elm-native-ui">Elm wrappers</a>, the ClojureScript wrapper <a href="https://github.com/drapanjanas/re-natal">Re-Natal</a> around React Native along with <a href="https://github.com/Day8/re-frame">re-frame</a> &amp; <a href="http://reagent-project.github.io">Reagent</a> wrapping around React are much more mature options. I also wanted to have a more serious look at Clojure for a while, as I have heard that it is exceptionally well designed as a language.</p>
<p>So this is the stack I am now using, which so far has turned out to be a good decision overall. I do feel reasonably comfortable in Clojure(Script) at this point, though the whole compilation process is still a bit arcane to me, as it compiles over Javascript to native code, and there are a lot of moving parts I do not know a lot about.</p>
<p>The only issue I encountered so far was that running on a real device did not work in React Native 0.54, which has been fixed in 0.55, which in turn deprecated some interfaces my navigation library was using, causing lots of nice warnings to show up in my build.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote"><img src="/images/ios-warnings.png" title="fig:" alt="png" /><br />
<br />
</span></span> I am currently in contact with the maintainer of the ClojureScript library which wraps a JavaScript library which has broken backwards compatibility, and I am working on fixing these issues myself, a great challenge considering I have about a month of ClojureScript experience at this point, but also a lot of fun.</p>
<p>My goal for this is to eventually end up on the App Store, use it myself, and <em>maybe</em> even make some money out of this. I do not expect this to ever become remotely profitable, but it is going to be a nice bullet point on my CV. So far I have a small fraction of the features I have planned, but I believe I have worked out most of the difficult parts to the point where I can quite efficiently extend the functionality on top of what I have built so far.</p>
<p>Bottom line of this post is, I like this stack a lot. It has not been smooth sailing all the way, and some of the tooling I use is still in quite early development, but I have yet to find anything that completely blocks me for more than an hour.</p>]]></summary>
</entry>
<entry>
    <title>Distractions, Productivity, and Working from Home</title>
    <link href="Distractions, Productivity, and Working from HomeDistractions, Productivity, and Working from Home" />
    <id>Distractions, Productivity, and Working from HomeDistractions, Productivity, and Working from Home</id>
    <published>2017-12-20T00:00:00Z</published>
    <updated>Distractions, Productivity, and Working from Home</updated>
    <summary type="html"><![CDATA[<p>I have been working from home more than usual recently, thanks to my employer, who understands that five days a week in an open office aren’t the ideal environment for everyone. After mentioning that I noticed a perceived increase in productivity, I was asked to find out what it is that makes me so much more productive at home. The obvious answer is that there are fewer distracting factors at home than at the office<span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">This can be coworkers directly, but also just things like background chatter, the coffee machine, or even just visual distractions in the form of people walking in your field of vision all the time.<br />
<br />
</span></span>, which of course is true, but it is not necessarily the truth.</p>
<p>The reason I feel more productive when working from home, and thus better in general, is my ability to easily get into the Zone™, the state of mind where focus on the task at hand trumps everything else. My objectively measured output in the form of commits can be easily gauged by just having a look at the Github activity histogram of my account, which shows that over the last month, the days I worked from home have seen almost a doubling of activity. This seems like a pretty obvious gain no one should be able to deny, but I am going to argue at this point that there is more to my job than just pumping out code.</p>
<h2 id="what-makes-a-great-engineer">What makes a great engineer?</h2>
<p>Sure, one part of my just is producing features and fixing bugs, but software engineering has a huge social component many tend to forget about. During the days I am in the office, I talk to developers from other teams, catch up on the latest developments, discuss design decisions for upcoming features and projects, help out in situations that are not strictly my responsibility, and generally just trade in some of my personal productivity to bring up company productivity. I think it is important to make this division, because on some days I personally do not write a single line of code, but I enable others to sometimes save hours of their time, which arguably is the greater gain for the company. Building a Fortress of Solitude can be tempting to boost personal output, but it is not what makes a great engineer.</p>
<h2 id="but-why">But why?</h2>
<p>Even after coming to the conclusion that the gain in personal productivity might not be worth it when looking at the big picture, I still maintain that I want to work from home some of the time. Why is that? The gain here is personal happiness for me. My happiness is, at least to some degree, bound to my (perceived) personal productivity. When I track time in the evening, write my work journal<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">Something I have been experimenting with. More on that in a future post. But it’s basically just writing down what I did by the end of the day.<br />
<br />
</span></span> or talk about yesterday in the daily standup, I feel pressured to have produced something more or less tangible. But on some days, I do not really have anything I can say I produced. I do not think anyone actually minds, because I just say “I spent eight hours yesterday helping someone unbreak the builds”, but somewhere deep down it still feels wrong.</p>
<p>Another thought I had was that I am not nearly as closely monitored when working from home compared to the days I am coming in. This allows me to just wander off to the kitchen, the toilet, or the supermarket if I feel like I need a couple of minutes to think something over. This is considerably harder to do in the office, even though our open office is not quite an Orwellian surveillance state. Instead of taking these small breaks, or sometimes even power naps, I just try to soldier through while I am at the office, because that is what I am there for.</p>
<h2 id="finding-a-compromise">Finding a compromise</h2>
<p>So what should you be doing? First of all, every situation is unique, and I cannot give any blanket advice. If you get the chance, I think you should definitely try working from home at some point. It does require some discipline, more if your home is actually busy with family or flat-mates. But do not take this opportunity for granted, and if your employer says that this is not working out from their perspective, you have no real alternative to accepting that fact.</p>
<p>Even when working from home, I make an effort to stay connected, which today means having Slack on all my devices<span><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle"/><span class="sidenote">This is in general a terrible idea, don’t do this. I will write about information diets at some point.<br />
<br />
</span></span> and being transparent about what I am doing. This is an important step when building trust so your employer does not feel like you are just abusing this privilege to catch up on Westworld. I also only work from home when I know I am not required in any meetings, and I make a point of talking to everyone I need to talk to the day before, so I can tie up all loose ends.</p>]]></summary>
</entry>
<entry>
    <title>Hello, World! Again!</title>
    <link href="Hello, World! Again!Hello, World! Again!" />
    <id>Hello, World! Again!Hello, World! Again!</id>
    <published>2017-11-11T00:00:00Z</published>
    <updated>Hello, World! Again!</updated>
    <summary type="html"><![CDATA[<p>First of all, I know it has been quite silent on here for a while. Since the last time I posted here, I switched jobs, and moved countries, so it would be fair to say that I have been quite busy in the meanwhile. But I’d still like to apologise, and I promise I will try to post more frequently from now on.</p>
<p>If you have been here before, you might have noticed that things have changed a fair bit. This is the new blog, reborn from the ashes, so to say. Though only because I felt like it was necessary to burn the old one. It’s now built using <a href="https://jaspervdj.be/hakyll/">Hakyll</a> instead of <a href="https://blog.getpelican.com">Pelican</a><span><label for="sn-1" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-1" class="margin-toggle"/><span class="sidenote">Why switch, you ask? Shiny toys, that’s why.<br />
<br />
</span></span>, and it’s using <a href="https://edwardtufte.github.io/tufte-css/">Tufte CSS</a> instead of my homegrown Jinja2 templates and CSS. I spent much more time on setting this up than I care to admit. The upshot is, I have new CSS without having to rewrite all my custom templates from scratch, and get to use these neat stylesheets.</p>
<p>One of my major pains with my old setup was the setup required to just write something quickly, due to the fact that I was maintaining my own styles and sources in different repositories, and also because Python requirements are notoriously janky if you’re not careful. This new system is handled entirely by <a href="https://www.stackage.org">stack</a>, which makes things much easier.<span><label for="sn-2" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-2" class="margin-toggle"/><span class="sidenote">By the way, you can get the source of this blog <a href="https://github.com/sulami/sulami.github.io">over here</a>, if you want to steal some code, or just look at it.<br />
<br />
</span></span> Initial setup takes quite a while, because I have to compile a whole load of dependencies, but it’s a fully automatic setup.</p>
<p>I have to admit, I was tempted to just switch to Medium during this whole process. But now that I have figured out how to build this whole thing<span><label for="sn-3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-3" class="margin-toggle"/><span class="sidenote">Read: get it to compile<br />
<br />
</span></span>, I am quite happy with the results. Because Hakyll, just like Pelican, uses Markdown as source to generate HTML, I could easily port over my old posts once the dust had settled.</p>]]></summary>
</entry>
<entry>
    <title>A Fuzzy Finder in Haskell</title>
    <link href="A Fuzzy Finder in HaskellA Fuzzy Finder in Haskell" />
    <id>A Fuzzy Finder in HaskellA Fuzzy Finder in Haskell</id>
    <published>2016-06-24T00:00:00Z</published>
    <updated>A Fuzzy Finder in Haskell</updated>
    <summary type="html"><![CDATA[<p>This is a response to <em><a href="http://blog.amjith.com/fuzzyfinder-in-10-lines-of-python">FuzzyFinder - in 10 lines of Python</a></em>, which was posted to reddit yesterday.</p>
<p>Following the blogpost linked above, I decided to write my own fuzzy finder in Haskell, because that is the language I am currently learning, and think has great potential. It is also a more interesting <a href="https://github.com/sulami/spielwiese/tree/master/hEuler">exercise</a> than <a href="https://projecteuler.net/">Project Euler</a>.</p>
<p>Just in case you have not read the original post and do not know what a fuzzy finder is, it is a mechanism to filter and sort a list of strings by searching for substrings. It is often used in text editors like vim or Sublime Text, where you can just type in <em>“accmanba”</em> and they will open up <code>account_management_backend.py</code> for you. As you can see, it makes switching between more than two files in a project much easier and faster.</p>
<p>Amjith wrote his finder using regular expressions, which are part of the Python standard library and can be compiled to be reasonably fast very easily. Sadly, Haskell has no implementation of regular expressions in its standard library, and I did not want to use third-party ones just for this. But as it turns out, we do not even need them, because the task is so simple and Haskell’s string manipulation capabilities are incredible, so that we can solve this by implementing the search algorithm ourselves and still achieve good performance.</p>
<p>So, let us get on to some actual code. The most interesting part here is the matching algorithm:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">partOf ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, <span class="dt">Int</span>)
partOf _ []     r <span class="fu">=</span> (<span class="dt">False</span>, <span class="dv">0</span>)
partOf c (x<span class="fu">:</span>xs) r <span class="fu">|</span>    c <span class="fu">==</span> x <span class="fu">=</span> (<span class="dt">True</span>, r <span class="fu">+</span> <span class="dv">1</span>)
                  <span class="fu">|</span> otherwise <span class="fu">=</span> partOf c xs <span class="fu">$</span> r <span class="fu">+</span> <span class="dv">1</span>

<span class="ot">match ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> ([<span class="dt">Char</span>], [<span class="dt">Char</span>]) <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, [<span class="dt">Int</span>])
match i s <span class="fu">=</span> match&#39; i (snd s) []
  <span class="kw">where</span>
<span class="ot">    match&#39; ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> (<span class="dt">Bool</span>, [<span class="dt">Int</span>])
    match&#39; []     _ r <span class="fu">=</span> (<span class="dt">True</span>, r)
    match&#39; (x<span class="fu">:</span>xs) s r <span class="fu">|</span> fst check <span class="fu">=</span> match&#39; xs (drop used s) <span class="fu">$</span> r <span class="fu">++</span> [used]
                      <span class="fu">|</span> otherwise <span class="fu">=</span> (<span class="dt">False</span>, r)
      <span class="kw">where</span>
        used <span class="fu">=</span> snd check
        check <span class="fu">=</span> partOf x s <span class="dv">0</span></code></pre></div>
<p>I know this is not really optimized for readability and especially not if you do not know Haskell, but stay with me, it is quite simple. Before we compare the input, we map all the possible solutions to lowercase and store them in a tuple like <code>(&quot;String&quot;, &quot;string&quot;)</code>. This way, we can compare against the lowercase version and return the properly capitalized one later on. All we do then is check for each possible solution if each character of the input string appears in order in the solution. If so, we add it to a list along with some data, specifically the position of the first match and the distance between the first and last matched character in the solution. This is the same Amjith did for sorting. All this data gets returned in a big list of tuples with both versions of the solutions and the match data. It is not pretty, but it works.</p>
<p>The one function the module actually exports is <code>fuzzyFinder</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fuzzyFinder ::</span> [<span class="dt">Char</span>] <span class="ot">-&gt;</span> [[<span class="dt">Char</span>]] <span class="ot">-&gt;</span> [[<span class="dt">Char</span>]]
fuzzyFinder input list <span class="fu">=</span> map fst <span class="fu">.</span> map snd <span class="fu">$</span> sort combo
  <span class="kw">where</span>
    combo <span class="fu">=</span> zip (zip ((map sum <span class="fu">.</span> map tail) scores) (map head scores)) matches
    scores <span class="fu">=</span> map snd <span class="fu">$</span> map (match input) matches
    matches <span class="fu">=</span> filter (fst <span class="fu">.</span> match input) <span class="fu">$</span> prepInput list</code></pre></div>
<p>All this function does is build the tuple list with the lowercase versions, toss it into the match function and filter out the correct versions from the matches that came back, ordering them by the match data in the same way Amjith did it. There are just a couple of extra lines that I omitted here because they are not important, but you can find the complete source on <a href="https://github.com/sulami/spielwiese/tree/master/hFuzzyFinder">Github</a>.</p>
<p>Now you might say, this cannot be fast, it is iterating through all this stuff and with big enough input it will take forever to present results. Let me show you this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">readL ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]
readL a <span class="fu">=</span> read <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">++</span> a <span class="fu">++</span> <span class="st">&quot;]&quot;</span>

main <span class="fu">=</span> <span class="kw">do</span> args <span class="ot">&lt;-</span> getArgs
          <span class="kw">if</span> length args <span class="fu">==</span> <span class="dv">2</span> <span class="kw">then</span> <span class="kw">do</span>
            list <span class="ot">&lt;-</span> readFile <span class="fu">$</span> args <span class="fu">!!</span> <span class="dv">1</span>
            print <span class="fu">$</span> fuzzyFinder (args <span class="fu">!!</span> <span class="dv">0</span>) <span class="fu">$</span> readL list
          <span class="kw">else</span>
            putStrLn <span class="st">&quot;Wrong number of args&quot;</span></code></pre></div>
<p>This is a small program that takes two arguments, the query string and a file path of a list of possible solutions and performs the actions outlined above. Using a 2.2GHz Core 2 Duo, because I am using my laptop, and a 46K list containing over 5000 words (Thanks, Project Euler), this happens:</p>
<pre><code>λ time ./interactive roro ../hEuler/022.input
[&quot;ROBERTO&quot;,&quot;RODRIGO&quot;,&quot;ROSARIO&quot;,&quot;GREGORIO&quot;,&quot;RIGOBERTO&quot;]
./interactive roro ../hEuler/022.input  0.08s user 0.00s system 96% cpu 0.079 total</code></pre>
<p>The execution time goes up to 0.09 seconds when printing out really many names, but that is caused by the fact that we have to print out 100 lines or more to the console, which also takes time. But in my opinion, this is more than fast enough for auto-completion, which is the main use for fuzzy finders.</p>
<p>So overall, I am really happy with how this turned out. I was able to write this on one morning despite still learning the language. It is reasonably concise despite the fact that I did not use regular expressions but searched the strings manually and also quite fast.</p>]]></summary>
</entry>

</feed>
